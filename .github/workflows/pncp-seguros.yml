name: PNCP Seguros (2min 06h–18h BR)

on:
  schedule:
    # 06:00–18:00 em São Paulo = 09:00–21:00 UTC
    - cron: "*/2 9-21 * * *"
  workflow_dispatch: {}

jobs:
  coletar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests openpyxl python-dotenv

      - name: Definir filtros (Brasil + Seguros)
        run: |
          echo "TZ=America/Sao_Paulo" >> $GITHUB_ENV
          echo "UFS=AC,AL,AP,AM,BA,CE,DF,ES,GO,MA,MT,MS,MG,PA,PB,PR,PE,PI,RJ,RN,RS,RO,RR,SC,SP,SE,TO" >> $GITHUB_ENV
          echo "DIAS_ATRAS=1" >> $GITHUB_ENV
          echo 'PALAVRAS_CHAVE=seguro;apólice;corretora de seguros;prêmio de seguro;endosso;seguro garantia;garantia contratual;performance bond;seguro de vida;acidentes pessoais;vida em grupo;seguro funeral;seguro saúde;plano de saúde;assistência saúde;seguro patrimonial;seguro empresarial;seguro multirrisco;seguro auto;frota;seguro de veículos;casco;responsabilidade civil;RC geral;RC profissional;RC obras;riscos de engenharia;obra civil;instalação e montagem;seguro transporte;carga;cascos marítimos;RC transportador;seguro cyber;cibernético;dados;LGPD;seguro ambiental;RC ambiental;seguro de equipamentos;máquinas;roubo e furto qualificado' >> $GITHUB_ENV
          echo "TS=$(TZ=America/Sao_Paulo date +'%Y%m%d_%H%M')" >> $GITHUB_ENV
          echo "HOJE=$(TZ=America/Sao_Paulo date +'%Y%m%d')" >> $GITHUB_ENV
          echo "OUTPUT=novidades_pncp_${TS}.xlsx" >> $GITHUB_ENV

      - name: Rodar script PNCP
        run: |
          python consulta_publicacoes_pncp_publica_versao1.py
          ls -lh *.xlsx || echo "Nenhum arquivo gerado ainda"

      - name: Criar script de deduplicação
        run: |
          cat > dedup.py << 'PY'
import os, pandas as pd, json, hashlib, pathlib, sys
today = os.environ["HOJE"]
output = os.environ["OUTPUT"]
pasta_estado = pathlib.Path("estado"); pasta_estado.mkdir(exist_ok=True)
seen_path = pasta_estado / f"chaves_{today}.json"
seen = set(json.loads(seen_path.read_text())) if seen_path.exists() else set()

# arquivo .xlsx mais recente
cands = sorted(pathlib.Path(".").glob("*.xlsx"), key=lambda p: p.stat().st_mtime, reverse=True)
if not cands:
    print("Sem .xlsx para processar"); sys.exit(0)
xlsx = cands[0]
df = pd.read_excel(xlsx)
# normaliza colunas
df.columns = [str(c).strip().lower() for c in df.columns]

# gera chave única por linha
def make_key(row):
    for c in ("id","idpublicacao","idcompra","link","url","numero","número"):
        if c in row and str(row[c]).strip():
            return f"{c}:{str(row[c]).strip()}"
    base = "||".join(str(row.get(c,"")).strip() for c in ("objeto","processo","órgão","orgao","uf","municipio"))
    return "md5:" + hashlib.md5(base.encode("utf-8")).hexdigest()

df["_k"] = [make_key(r) for _, r in df.iterrows()]
novas = df[~df["_k"].isin(seen)].copy()

if novas.empty:
    open("SEM_NOVIDADES","w").write("sem novidades")
    print("Sem novidades novas.")
else:
    seen |= set(novas["_k"])
    seen_path.write_text(json.dumps(sorted(seen)))
    novas.drop(columns=["_k"]).to_excel(output, index=False)
    print(f"{len(novas)} novidades -> {output}")
PY

      - name: Executar deduplicação
        run: |
          python dedup.py

      - name: Publicar artefato (se houve novidades)
        if: ${{ !hashFiles('SEM_NOVIDADES') }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}

      - name: Salvar estado e resultados no branch 'dados'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin || true
          git checkout -B dados
          mkdir -p resultados estado
          if [ -f $OUTPUT ]; then mv $OUTPUT resultados/$OUTPUT; fi
          git add resultados estado
          git commit -m "Atualização ${OUTPUT}" || echo "Nada novo"
          git push origin dados --force
